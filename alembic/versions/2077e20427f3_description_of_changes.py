# """Description of changes

# Revision ID: 2077e20427f3
# Revises:
# Create Date: 2023-12-21 22:05:57.401628

# """
# import uuid
# from typing import Sequence, Union

# from alembic import op
# import sqlalchemy as sa
# from sqlalchemy.dialects import postgresql
# from sqlalchemy.dialects.postgresql import UUID

# from faq_generator.config import get_settings


# settings = get_settings()

# # revision identifiers, used by Alembic.
# revision: str = '2077e20427f3'
# down_revision: Union[str, None] = None
# branch_labels: Union[str, Sequence[str], None] = None
# depends_on: Union[str, Sequence[str], None] = None


# def upgrade() -> None:
#     print('UPGRADE')
#     print(settings)
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.execute(f"CREATE SCHEMA IF NOT EXISTS {settings.database.schema}")


#     op.create_table(
#         'user',
#         sa.Column('id', sa.Integer, primary_key=True),
#         sa.Column('guid', UUID(as_uuid=True), nullable=False, unique=True, default=uuid.uuid4),
#         sa.Column('username', sa.String(255), nullable=False, unique=True),
#         sa.Column('email', sa.String(255), nullable=False, unique=True),
#         sa.Column('created_at', sa.DateTime, server_default=sa.func.now()),
#         sa.Column('updated_at', sa.DateTime, server_default=sa.func.now(), onupdate=sa.func.now()),
#         schema=settings.database.schema
#     )


#     # Create FAQSection table
#     op.create_table(
#         'faq_section',
#         sa.Column('id', sa.Integer, primary_key=True),
#         sa.Column('guid', UUID(as_uuid=True), nullable=False, unique=True, default=uuid.uuid4),
#         sa.Column('user_id', sa.Integer, sa.ForeignKey(f'{settings.database.schema}.user.id', ondelete='SET NULL'), nullable=True),
#         sa.Column('title', sa.String(255), nullable=False),
#         sa.Column('description', sa.Text, nullable=True),
#         sa.Column('created_at', sa.DateTime, server_default=sa.func.now()),
#         sa.Column('updated_at', sa.DateTime, server_default=sa.func.now(), onupdate=sa.func.now()),
#         schema=settings.database.schema
#     )


#     op.create_table(
#         'faq_item',
#         sa.Column('id', sa.Integer, primary_key=True),
#         sa.Column('guid', UUID(as_uuid=True), nullable=False, unique=True, default=uuid.uuid4),
#         sa.Column('question', sa.Text, nullable=False),
#         sa.Column('answer', sa.Text, nullable=False),
#         sa.Column('order', sa.Integer, nullable=False, default=0),
#         sa.Column('faq_section_id', sa.Integer, sa.ForeignKey(f'{settings.database.schema}.faq_section.id', ondelete='CASCADE')),
#         sa.Column('created_at', sa.DateTime, server_default=sa.func.now()),
#         sa.Column('updated_at', sa.DateTime, server_default=sa.func.now(), onupdate=sa.func.now()),
#         schema=settings.database.schema
#     )


# def downgrade() -> None:
#     # ### commands auto generated by Alembic - please adjust! ###

#     # op.drop_table('HotNewsItem', schema=settings.database.schema)
#     # ### end Alembic commands ###


#     op.drop_table('user', schema=settings.database.schema)
#     op.drop_table('faq_item', schema=settings.database.schema)
#     op.drop_table('faq_section', schema=settings.database.schema)

#     op.execute(f"DROP SCHEMA {settings.database.schema}")
#     pass


"""Description of changes

Revision ID: 2077e20427f3
Revises:
Create Date: 2023-12-21 22:05:57.401628

"""

import uuid
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID

from web_tools.config import get_settings


settings = get_settings()

# revision identifiers, used by Alembic.
revision: str = "2077e20427f3"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    print("UPGRADE")
    print(settings)
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(f"CREATE SCHEMA IF NOT EXISTS {settings.database.schema}")

    # Create User table
    op.create_table(
        "User",
        # sa.Column('id', sa.Integer, primary_key=True),
        sa.Column(
            "id", sa.String(255), primary_key=True, default=lambda: str(uuid.uuid4())
        ),
        # sa.Column('id', UUID(as_uuid=True), nullable=True, unique=True, default=uuid.uuid4, primary_key=True),
        sa.Column(
            "guid", UUID(as_uuid=True), nullable=True, unique=True, default=uuid.uuid4
        ),
        sa.Column("username", sa.String(255), nullable=True, unique=True),
        sa.Column("email", sa.String(255), nullable=False, unique=True),
        sa.Column("emailVerified", sa.DateTime, nullable=True),
        sa.Column("image", sa.String(255), nullable=True),
        sa.Column("created_at", sa.DateTime, server_default=sa.func.now()),
        sa.Column(
            "updated_at",
            sa.DateTime,
            server_default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        schema=settings.database.schema,
    )

    # Create FAQSection table
    op.create_table(
        "faq_section",
        sa.Column("id", sa.Integer, primary_key=True),
        sa.Column(
            "guid", UUID(as_uuid=True), nullable=False, unique=True, default=uuid.uuid4
        ),
        sa.Column(
            "user_id",
            sa.String,
            sa.ForeignKey(f"{settings.database.schema}.User.id", ondelete="SET NULL"),
            nullable=True,
        ),
        sa.Column("title", sa.String(255), nullable=False),
        sa.Column("is_public", sa.Boolean, nullable=False, default=False),
        sa.Column("description", sa.Text, nullable=True),
        sa.Column("created_at", sa.DateTime, server_default=sa.func.now()),
        sa.Column(
            "updated_at",
            sa.DateTime,
            server_default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        schema=settings.database.schema,
    )

    # Create FAQItem table
    op.create_table(
        "faq_item",
        sa.Column("id", sa.Integer, primary_key=True),
        sa.Column(
            "guid", UUID(as_uuid=True), nullable=False, unique=True, default=uuid.uuid4
        ),
        sa.Column("question", sa.Text, nullable=False),
        sa.Column("answer", sa.Text, nullable=False),
        sa.Column("order", sa.Integer, nullable=False, default=0),
        sa.Column(
            "faq_section_id",
            sa.Integer,
            sa.ForeignKey(
                f"{settings.database.schema}.faq_section.id", ondelete="CASCADE"
            ),
        ),
        sa.Column("created_at", sa.DateTime, server_default=sa.func.now()),
        sa.Column(
            "updated_at",
            sa.DateTime,
            server_default=sa.func.now(),
            onupdate=sa.func.now(),
        ),
        schema=settings.database.schema,
    )

    # Create Account table
    op.create_table(
        "Account",
        # sa.Column('id', UUID(as_uuid=True), primary_key=True, default=uuid.uuid4),
        sa.Column("id", sa.String, primary_key=True, default=lambda: str(uuid.uuid4())),
        sa.Column(
            "userId",
            sa.String,
            sa.ForeignKey(f"{settings.database.schema}.User.id", ondelete="CASCADE"),
            nullable=False,
        ),
        sa.Column("type", sa.String, nullable=False),
        sa.Column("provider", sa.String, nullable=False),
        sa.Column("providerAccountId", sa.String, nullable=False),
        sa.Column("refresh_token", sa.String, nullable=True),
        sa.Column("refresh_token_expires_in", sa.Integer, nullable=True),
        sa.Column("access_token", sa.String, nullable=True),
        sa.Column("expires_at", sa.Integer, nullable=True),
        sa.Column("token_type", sa.String, nullable=True),
        sa.Column("scope", sa.String, nullable=True),
        sa.Column("id_token", sa.String, nullable=True),
        sa.Column("session_state", sa.String, nullable=True),
        sa.Column("not_before", sa.Integer, nullable=True),
        sa.Column("id_token_expires_in", sa.Integer, nullable=True),
        sa.Column("profile_info", sa.String, nullable=True),
        sa.UniqueConstraint(
            "provider", "providerAccountId", name="uq_provider_providerAccountId"
        ),
        schema=settings.database.schema,
    )

    # Create Session table
    op.create_table(
        "Session",
        # sa.Column('id', UUID(as_uuid=True), primary_key=True, default=uuid.uuid4),
        sa.Column(
            "id", sa.String(255), primary_key=True, default=lambda: str(uuid.uuid4())
        ),
        sa.Column("sessionToken", sa.String, nullable=False, unique=True),
        sa.Column(
            "userId",
            sa.String,
            sa.ForeignKey(f"{settings.database.schema}.User.id", ondelete="CASCADE"),
            nullable=False,
        ),
        sa.Column("expires", sa.DateTime(timezone=True), nullable=False),
        schema=settings.database.schema,
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_table("session", schema=settings.database.schema)
    op.drop_table("account", schema=settings.database.schema)
    op.drop_table("faq_item", schema=settings.database.schema)
    op.drop_table("faq_section", schema=settings.database.schema)
    op.drop_table("user", schema=settings.database.schema)

    op.execute(f"DROP SCHEMA {settings.database.schema}")
    pass
